#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include <dt-bindings/zmk/ext_power.h>

#define _ &kp
#define ___ &none
#define ______ &trans

#define DEF 0
#define GAM 1
#define GFN 2
#define SFT 3
#define NAV 4
#define SYM 5
#define ALT 6
#define NUM 7
#define CMD 8

#define MEH(key) LS(LC(LA(key)))

#define SQT GRAVE
#define DQT LS(GRAVE)
#define GRV RA(GRAVE)
#define PIP LS(BSLH)
#define BSL RA(BSLH)
#define NBSP RA(SPACE)

#define NSPC LC(LG(RIGHT))
#define PSPC LC(LG(LEFT))

// custom implementation of modified callum-mods,
// which can be released on second keypress
// and also work with swapper and/or tabber

#define PARAM_1 0
#define PARAM_2 0

#define MACRO(NAME, COMPATIBLE, BINDING_CELLS, BINDINGS) \
    NAME: NAME { \
        compatible = COMPATIBLE; \
        #binding-cells = <BINDING_CELLS>; \
        wait-ms = <0>; \
        tap-ms = <0>; \
        bindings = \
            <BINDINGS>; \
    };

#define MACRO_NO_PARAM(NAME, BINDINGS)  MACRO(NAME, "zmk,behavior-macro"          , 0, BINDINGS)
#define MACRO_ONE_PARAM(NAME, BINDINGS) MACRO(NAME, "zmk,behavior-macro-one-param", 1, BINDINGS)
#define MACRO_TWO_PARAM(NAME, BINDINGS) MACRO(NAME, "zmk,behavior-macro-two-param", 2, BINDINGS)

#define MAX_TIMER __UINT32_MAX__ // around 50 days

#define STICKY_FOREVER(NAME, BIND) \
    NAME: NAME { \
        compatible = "zmk,behavior-sticky-key"; \
        #binding-cells = <1>; \
        bindings = <BIND>; \
        release-after-ms = <MAX_TIMER>; \
        ignore-modifiers; \
    };

#define MODMORPH(NAME, NORMAL, MORPHED, MODS, KEEP_MODS) \
    NAME: NAME { \
        compatible = "zmk,behavior-mod-morph"; \
        #binding-cells = <0>; \
        bindings = <NORMAL>, <MORPHED>; \
        mods = <(MODS)>; \
        keep-mods = <(KEEP_MODS)>; \
    };

&sk {
        release-after-ms = <60000>;
};

/ {
    behaviors {
        MACRO_ONE_PARAM(
            m_release_key_twice,
            &macro_release
                &macro_param_1to1 &kp PARAM_1
                &macro_param_1to1 &kp PARAM_1
        )


        MACRO_ONE_PARAM(
            m_press_key_twice,
            &macro_press
                &macro_param_1to1 &kp PARAM_1
                &macro_param_1to1 &kp PARAM_1
            &macro_pause_for_release
            &macro_tap
                &m_release_key_twice PARAM_1
        )

        STICKY_FOREVER(sticky_forever, &m_press_key_twice)

        MODMORPH(
            cm_gui,
            &sticky_forever LGUI,
            &m_release_key_twice LGUI,
            MOD_LGUI,
            MOD_LGUI
        )

        MODMORPH(
            cm_alt,
            &sticky_forever LALT,
            &m_release_key_twice LALT,
            MOD_LALT,
            MOD_LALT
        )

        MODMORPH(
            cm_ctrl,
            &sticky_forever LCTRL,
            &m_release_key_twice LCTRL,
            MOD_LCTL,
            MOD_LCTL
        )

        MODMORPH(
            cm_sft,
            &sticky_forever LSHIFT,
            &m_release_key_twice LSHIFT,
            MOD_LSFT,
            MOD_LSFT
        )

        MACRO_TWO_PARAM(
            m_hold_mod_press_key,
            &macro_press
                &macro_param_1to1 &kp PARAM_1
            &macro_tap
                &macro_param_2to1 &kp PARAM_2
        )

        MODMORPH(
            tabber,
            &m_hold_mod_press_key LCTRL TAB,
            &kp TAB,
            MOD_LCTL,
            MOD_LCTL
        )

        MODMORPH(
            swapper_win,
            &m_hold_mod_press_key LALT TAB,
            &kp TAB,
            MOD_LALT,
            MOD_LALT
        )

        MODMORPH(
            swapper_mac,
            &m_hold_mod_press_key LGUI TAB,
            &kp TAB,
            MOD_LGUI,
            MOD_LGUI
        )

        MACRO_ONE_PARAM(
            la,
            &macro_tap
                &kp 0 // do nothing, fire all sticky keys
            &macro_press
                &macro_param_1to1 &mo PARAM_1
            &macro_pause_for_release
            &macro_release
                &macro_param_1to1 &mo PARAM_1
                &kp LSHFT
                &kp LCTRL
                &kp LALT
                &kp LGUI
        )
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers  = <NAV SYM>;
            then-layer = <NUM>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        def_layer {
            bindings = <
    _ Q        _ W        _ E        _ R       _ T             _ Y        _ U        _ I        _ O       _ P
    _ A        _ S        _ D        _ F       _ G             _ H        _ J        _ K        _ L       _ SEMI
    _ Z        _ X        _ C        _ V       _ B             _ N        _ M        _ COMMA    _ DOT     _ FSLH
                                     _ SPACE   &la NAV         &la SYM    &mo SFT
            >;
        };

        gam_layer {
            bindings = <
    _ TAB      _ Q        _ X        _ E       _ R             ___        ___        ___        ___       _ TAB
    _ LSFT     _ A        _ W        _ D       _ F             ___        _ LEFT     _ UP       _ RIGHT   _ RSFT
    _ LCTRL    _ Z        _ S        _ C       _ V             ___        ___        _ DOWN     ___       _ RCTRL
                                     _ SPACE   &mo GFN         &tog GAM   _ SPACE
            >;
        };

        gfn_layer {
            bindings = <
    _ N5       _ N1       _ N2       _ N3      _ N4            ___        ___        ___        ___       ___
    _ N0       _ N6       _ N7       _ N8      _ N9            ___        ___        ___        ___       ___
    _ G        _ J        _ I        _ M       _ T             ___        ___        ___        ___       ___
                                     ______    ______          ______     ______
            >;
        };

        sft_layer {
            bindings = <
    _ LS(Q)    _ LS(W)    _ LS(E)    _ LS(R)   _ LS(T)         _ LS(Y)    _ LS(U)    _ LS(I)     _ LS(O)   _ LS(P)
    _ LS(A)    _ LS(S)    _ LS(D)    _ LS(F)   _ LS(G)         _ LS(H)    _ LS(J)    _ LS(K)     _ LS(L)   _ LS(SEMI)
    _ LS(Z)    _ LS(X)    _ LS(C)    _ LS(V)   _ LS(B)         _ LS(N)    _ LS(M)    _ LS(COMMA) _ LS(DOT) _ LS(FSLH)
                                     ______    ______          &mo ALT    ______
            >;
        };

        nav_layer {
            bindings = <
    &tabber    &swapper_win ___        _ CAPS   _ ESC          _ ESC      _ HOME     _ END      _ BSPC    _ DEL
    &cm_gui    &cm_alt      &cm_ctrl   &cm_sft  _ RET          _ RET      _ LEFT     _ DOWN     _ UP      _ RIGHT
    _ PSPC     _ NSPC       &tog GAM   _ PSCRN  _ TAB          _ TAB      _ PG_UP    _ PG_DN    _ APOS    _ KP_NUM
                                       &mo CMD  ______         ______     ______
            >;
        };

        sym_layer {
            bindings = <
    _ N1       _ N2       _ N3       _ N4      _ N5            _ N6       _ N7       _ N8       _ N9       _ N0
    _ SEMI     _ GRV      _ SQT      _ DQT     _ MINUS         _ PLUS     &cm_sft    &cm_ctrl   &cm_alt    &cm_gui
    _ BSL      ___        _ LS(LBKT) _ LBKT    _ UNDER         _ EQUAL    _ RBKT     _ LS(RBKT) _ PIP      _ BSLH
                                     _ NBSP    ______          ______     &mo ALT
            >;
        };

        alt_layer {
            bindings = <
    _ RA(Q)    _ RA(W)    _ RA(E)    _ RA(R)   _ RA(T)         _ RA(Y)    _ RA(U)    _ RA(I)     _ RA(O)   _ RA(P)
    _ RA(A)    _ RA(S)    _ RA(D)    _ RA(F)   _ RA(G)         _ RA(H)    _ RA(J)    _ RA(K)     _ RA(L)   _ RA(SEMI)
    _ RA(Z)    _ RA(X)    _ RA(C)    _ RA(V)   _ RA(B)         _ RA(N)    _ RA(M)    _ RA(COMMA) _ RA(DOT) _ RA(FSLH)
                                     ______    ______          ______     ______
            >;
        };

        num_layer {
            bindings = <
    _ KP_N1    _ KP_N2    _ KP_N3    _ KP_N4   _ KP_N5         _ KP_N6    _ KP_N7    _ KP_N8    _ KP_N9   _ KP_N0
    &cm_gui    &cm_alt    &cm_ctrl   &cm_sft   _ F11           _ F12      &cm_sft    &cm_ctrl   &cm_alt    &cm_gui
    _ F1       _ F2       _ F3       _ F4      _ F5            _ F6       _ F7       _ F8       _ F9      _ F10
                                     ______    ______          ______     ______
            >;
        };

        cmd_layer {
            bindings = <
    _ MEH(Q)    _ MEH(W)   _ MEH(E)   _ MEH(R)  _ MEH(T)       _ MEH(Y)   _ C_VOL_DN _ C_MUTE     _ C_VOL_UP _ MEH(P)
    _ MEH(A)    _ MEH(S)   _ MEH(D)   _ MEH(F)  _ MEH(G)       _ MEH(H)   _ C_PREV   _ C_PP       _ C_NEXT   _ MEH(SEMI)
    &bootloader _ MEH(X)   _ MEH(C)   _ MEH(V)  _ MEH(B)       _ MEH(N)   _ MEH(M)   _ MEH(COMMA) _ MEH(DOT) &bootloader
                                      ______    ______         ______     ______
            >;
        };
    };
};
